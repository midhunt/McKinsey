str(dtTrain)
dtTrain[, c("hypertension",
"heart_disease",
"smoking_status",
"work_type") := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = c("hypertension",
"heart_disease",
"smoking_status",
"work_type")]
dtTest[, c("hypertension",
"heart_disease",
"smoking_status",
"work_type") := lapply(.SD,
function(x){
as.factor(x)
}),
.SDcols = c("hypertension",
"heart_disease",
"smoking_status",
"work_type")]
model3 <- gbm(stroke ~ AgeBin + hypertension + heart_disease +
smoking_status + GlucoseLevelBins + BMIBin + work_type,
distribution = "bernoulli",
data = dtTrain)
dtTrain[, predictedProbabilites := predict(model2, type = "response")]
dtTrain[, predictedProbabilites := predict(model3, type = "response")]
dtTrain[, predictedProbabilites := predict(model3, n.trees = 100,
type = "response")]
plot(sort(dtTrain$predictedProbabilites, decreasing = F),
ylab = "probability", main = "Probability Curve for Model1")
dtTrain[, predictedStroke := ifelse(predictedProbabilites > 0.020,
TRUE, FALSE)]
# Confusion Matrix
table(dtTrain$stroke, dtTrain$predictedStroke)
dtSubmission[, stroke := predict(model2, dtTest, type = "response")]
dtSubmission[, stroke := predict(model3, dtTest, n.trees = 100,
type = "response")]
write.csv(
dtSubmission,
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/sample_submission_1.csv"
),
row.names = F
)
cvAUC::AUC(dtTrain$predictedStroke, dtTrain$stroke)
# Remove existing object from the environment
rm(list = ls())
# changing default chunk options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Loading the required libraries
library(data.table)
library(ggplot2)
library(caret)
library(randomForest)
dtTrain <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/train_ajEneEa.csv"
)
)
dtTrain[, AgeBin := cut(age,
breaks = seq(0, 90, 10),
include.lowest = T)]
dtTrain[, BMIBin := cut(bmi,
breaks = c(0, 15, 16, 18.5, 25, 30, 35, 40, 100),
labels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese"),
include.lowest = T)]
dtTrain[is.na(BMIBin), BMIBin := "Unknown"]
dtTrain[, BMIBin := factor(BMIBin,
levels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese",
"Unknown"))]
dtTrain[, smoking_status := ifelse(smoking_status == "",
"Unknown", smoking_status)]
dtTrain[, GlucoseLevelBins := cut(avg_glucose_level,
breaks = seq(50, 300, 50),
include.lowest = T)]
library(xgboost)
library(Matrix)
sparse.model.matrix
?sparse.model.matrix
dtTest <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/test_v2akXPA.csv"
)
)
dtTest[, AgeBin := cut(age,
breaks = seq(0, 90, 10),
include.lowest = T)]
dtTest[, BMIBin := cut(bmi,
breaks = c(0, 15, 16, 18.5, 25, 30, 35, 40, 100),
labels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese"),
include.lowest = T)]
dtTest[is.na(BMIBin), BMIBin := "Unknown"]
dtTest[, BMIBin := factor(BMIBin,
levels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese",
"Unknown"))]
dtTest[, smoking_status := ifelse(smoking_status == "",
"Unknown", smoking_status)]
dtTest[, GlucoseLevelBins := cut(avg_glucose_level,
breaks = seq(50, 300, 50),
include.lowest = T)]
library(xgboost)
library(Matrix)
# Set seed because we column-sample
set.seed(1)
y <- "stroke"
train.mx <- sparse.model.matrix(response ~ ., dtTrain)
y <- "stroke"
train.mx <- sparse.model.matrix(stroke ~ AgeBin + hypertension + heart_disease +
smoking_status + GlucoseLevelBins + BMIBin + work_type, dtTrain)
test.mx <- sparse.model.matrix(stroke ~ AgeBin + hypertension + heart_disease +
smoking_status + GlucoseLevelBins + BMIBin + work_type, dtTest)
dtrain <- xgb.DMatrix(train.mx, label = dtTrain[,y])
dtrain <- xgb.DMatrix(train.mx, label = dtTrain[,y, with = F])
dtrain <- xgb.DMatrix(train.mx, label = dtTrain[, stroke])
?xgb.train
train.gdbt <- xgb.train(params = list(objective = "binary:logistic",
#num_class = 2,
#eval_metric = "mlogloss",
eta = 0.3,
max_depth = 5,
subsample = 1,
colsample_bytree = 0.5),
data = dtrain,
nrounds = 70,
watchlist = list(train = dtrain))
# Submission file
dtSubmission <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/sample_submission_1.csv"
)
)
dtSubmission[, stroke := predict(train.gdbt, dtTest)]
install.packages("glmnet")
library(glmnet)
?train
predictors <- c("AgeBin", "hypertension", "heart_disease",
"smoking_status", "GlucoseLevelBins", "BMIBin",
"work_type")
rm(y)
# create caret trainControl object to control the number of cross-validations performed
objControl <- trainControl(method='cv', number=3, returnResamp='none')
model3 <- train(dtTrain[, predictors],
dtTrain[, "stroke"],
method = "glmnet",
metric = "RMSE",
trControl = objControl)
dtTrain[, predictors]
dtTrain[, predictors, with=F]
model3 <- train(dtTrain[, predictors, with=F],
dtTrain[, "stroke"],
method = "glmnet",
metric = "RMSE",
trControl = objControl)
model3 <- train(dtTrain[, predictors, with=F],
dtTrain[, stroke],
method = "glmnet",
metric = "RMSE",
trControl = objControl)
model3 <- train(dtTrain[, predictors, with=F],
dtTrain[, stroke],
method = "glmnet",
metric = "Kappa",
trControl = objControl)
model3 <- train(as.matrix(dtTrain[, predictors, with=F]),
dtTrain[, stroke],
method = "glmnet",
metric = "Kappa",
trControl = objControl)
model3 <- train(as.matrix(dtTrain[, predictors, with=F]),
as.matrix(dtTrain[, stroke]),
method = "glmnet",
metric = "Kappa",
trControl = objControl)
rm(list = ls())
# Remove existing object from the environment
rm(list = ls())
# changing default chunk options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Loading the required libraries
library(data.table)
library(ggplot2)
library(caret)
# Loading the training set
dtTrain <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/train_ajEneEa.csv"
)
)
# Grouping Ages
dtTrain[, AgeBin := cut(age,
breaks = seq(0, 90, 10),
include.lowest = T)]
# Creating Bins and categorise missing values as Unknown
dtTrain[, BMIBin := cut(bmi,
breaks = c(0, 15, 16, 18.5, 25, 30, 35, 40, 100),
labels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese"),
include.lowest = T)]
dtTrain[is.na(BMIBin), BMIBin := "Unknown"]
dtTrain[, BMIBin := factor(BMIBin,
levels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese",
"Unknown"))]
# Empty string in smoking_status are coverted as unknown
dtTrain[, smoking_status := ifelse(smoking_status == "",
"Unknown", smoking_status)]
# Grouping Glucose levels as bins
dtTrain[, GlucoseLevelBins := cut(avg_glucose_level,
breaks = seq(50, 300, 50),
include.lowest = T)]
AgeSampleGroup <- dtTrain[, .(Sample_N = .N),
by = "AgeBin"][, Sample_pct := Sample_N/sum(Sample_N)]
AgeStrokeGroup <- dtTrain[stroke == T,
.(Stroke_N = .N),
by = c("AgeBin")][, Stroke_pct := Stroke_N/sum(Stroke_N)]
AgeGroup <- merge(AgeSampleGroup,
AgeStrokeGroup,
by = "AgeBin",
all = T)
AgeGroup[, N_pct := Stroke_N/Sample_N]
ggplot(AgeGroup) +
geom_bar(aes(x = AgeBin, y = N_pct), stat = "identity") +
scale_y_continuous(labels = scales::percent) +
xlab("Age Groups") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke In Each Age Group")
AgeSampleGroup <- dtTrain[, .(Sample_N = .N),
by = "AgeBin"][, Sample_pct := Sample_N/sum(Sample_N)]
AgeStrokeGroup <- dtTrain[stroke == T,
.(Stroke_N = .N),
by = c("AgeBin")][, Stroke_pct := Stroke_N/sum(Stroke_N)]
AgeGroup <- merge(AgeSampleGroup,
AgeStrokeGroup,
by = "AgeBin",
all = T)
AgeGroup[, N_pct := Stroke_N/Sample_N]
ggplot(AgeGroup) +
geom_bar(aes(x = AgeBin, y = N_pct), stat = "identity") +
scale_y_continuous(labels = scales::percent) +
xlab("Age Groups") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke In Each Age Group")
BMISampleGroup <- dtTrain[, .(Sample_N = .N),
by = BMIBin][,
Sample_pct := Sample_N/sum(Sample_N)]
BMIStrokeGroup <- dtTrain[stroke == T, .(Stroke_N = .N),
by = BMIBin][, Stroke_pct := Stroke_N/sum(Stroke_N)]
BMIGroup <- merge(BMISampleGroup,
BMIStrokeGroup,
by = "BMIBin",
all = T)
BMIGroup[, N_pct := Stroke_N/Sample_N]
ggplot(BMIGroup) +
geom_bar(aes(x = BMIBin, y = N_pct), stat = "identity") +
scale_y_continuous(labels = scales::percent) +
xlab("BMI Groups") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke in Each BMI Group") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# How does work type affect the stroke
WorkTypeSampleGroups <- dtTrain[, .(Samaple_N = .N),
by = "work_type"][,
Sample_pct := Samaple_N/sum(Samaple_N)]
WorkTypeStrokeGroups <- dtTrain[stroke == T, .(Stroke_N = .N),
by = "work_type"][,
Stroke_pct := Stroke_N/sum(Stroke_N)]
WorkType <- merge(WorkTypeSampleGroups,
WorkTypeStrokeGroups,
by = "work_type",
all = T)
WorkType[, c("Stroke_N",
"Stroke_pct") := lapply(.SD,
function(x){
x = ifelse(is.na(x), 0, x)
}),
.SDcols = c("Stroke_N",
"Stroke_pct")]
WorkType[, N_pct := Stroke_N/Samaple_N]
ggplot(WorkType) +
geom_bar(aes(x = work_type, y = N_pct), stat = "identity") +
scale_y_continuous(labels = scales::percent) +
xlab("Work Type") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke In Each Age Group")
HypertensionSampleGroup <- dtTrain[, .(Sample_N = .N),
by = hypertension][,
Sample_pct := Sample_N/sum(Sample_N)]
HypertensionStrokeGroup <- dtTrain[stroke == T, .(Stroke_N = .N),
by = hypertension][,
Stroke_pct := Stroke_N/sum(Stroke_N)]
Hypertension <- merge(HypertensionSampleGroup,
HypertensionStrokeGroup,
by = "hypertension",
all = T)
Hypertension[, N_pct := Stroke_N/Sample_N]
ggplot(Hypertension) +
geom_bar(aes(x = hypertension, y = N_pct),
stat = "identity", width = 0.25) +
scale_y_continuous(labels = scales::percent) +
xlab("Hypertension") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke Who Has Hypertension")
HeartDiseaseSampleGroup <- dtTrain[, .(Sample_N = .N),
by = heart_disease][,
Sample_pct := Sample_N/sum(Sample_N)]
HeartDiseaseStrokeGroup <- dtTrain[stroke == TRUE, .(Stroke_N = .N),
by = heart_disease][,
Stroke_pct := Stroke_N/sum(Stroke_N)]
HeartDisease <- merge(HeartDiseaseSampleGroup,
HeartDiseaseStrokeGroup,
by = "heart_disease",
all = T)
HeartDisease[, N_pct := Stroke_N/Sample_N]
ggplot(HeartDisease) +
geom_bar(aes(x = heart_disease, y = N_pct),
stat = "identity", width = 0.25) +
scale_y_continuous(labels = scales::percent) +
xlab("Heart Disease") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke Who Has Heart Diseases")
SmokingSampleGroup <- dtTrain[, .(Sample_N = .N),
by = smoking_status][,
Sample_pct := Sample_N/sum(Sample_N)]
SmokingStrokeGroup <- dtTrain[stroke == TRUE, .(Stroke_N = .N),
by = smoking_status][,
Stroke_pct := Stroke_N/sum(Stroke_N)]
Smoking <- merge(SmokingSampleGroup,
SmokingStrokeGroup,
by = "smoking_status",
all = T)
Smoking[, N_pct := Stroke_N/Sample_N]
ggplot(Smoking) +
geom_bar(aes(x = smoking_status, y = N_pct),
stat = "identity", width = 0.4) +
scale_y_continuous(labels = scales::percent) +
xlab("Smoking Status") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke Who Smoke")
EverMarriedSampleGroup <- dtTrain[, .(Sample_N = .N),
by = ever_married][,
Sample_pct := Sample_N/sum(Sample_N)]
EverMarriedStrokeGroup <- dtTrain[stroke == T, .(Stroke_N = .N),
by = ever_married][,
Stroke_pct := Stroke_N/sum(Stroke_N)]
EverMarried <- merge(EverMarriedSampleGroup,
EverMarriedStrokeGroup,
by = "ever_married",
all = T)
EverMarried[, N_pct := Stroke_N/Sample_N]
ggplot(EverMarried) +
geom_bar(aes(x = ever_married, y = N_pct),
stat = "identity", width = 0.25) +
scale_y_continuous(labels = scales::percent) +
xlab("Married") +
ylab("% Patients") +
ggtitle("Patients Affected With Stroke Because of Marriage")
# BMI values have been missing
# BMI Index has been grouped based on WHO Statistical categories
# Missing BMI values are grouped as Unknown
model2 <- glm(stroke ~ AgeBin + hypertension + heart_disease +
GlucoseLevelBins + BMIBin + work_type,
data = dtTrain, family = binomial(link = "probit"))
dtTrain[, predictedProbabilites := predict(model2, type = "response")]
plot(sort(dtTrain$predictedProbabilites, decreasing = F),
ylab = "probability", main = "Probability Curve for Model1")
dtTrain[, predictedStroke := ifelse(predictedProbabilites > 0.040,
TRUE, FALSE)]
plot(sort(dtTrain$predictedProbabilites, decreasing = F),
ylab = "probability", main = "Probability Curve for Model1")
dtTrain[, predictedStroke := ifelse(predictedProbabilites > 0.020,
TRUE, FALSE)]
# Confusion Matrix
confusionMatrix(dtTrain$stroke, dtTrain$predictedStroke)
dtTrain[, predictedStroke := ifelse(predictedProbabilites > 0.040,
TRUE, FALSE)]
# Confusion Matrix
confusionMatrix(dtTrain$stroke, dtTrain$predictedStroke)
dtSubmission[, stroke := predict(model2, dtTest, type = "response")]
# Submission file
dtSubmission <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/sample_submission_1.csv"
)
)
dtSubmission[, stroke := predict(model2, dtTest, type = "response")]
# Wrangling Testing Dataset
dtTest <- fread(
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/test_v2akXPA.csv"
)
)
dtTest[, AgeBin := cut(age,
breaks = seq(0, 90, 10),
include.lowest = T)]
dtTest[, BMIBin := cut(bmi,
breaks = c(0, 15, 16, 18.5, 25, 30, 35, 40, 100),
labels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese"),
include.lowest = T)]
dtTest[is.na(BMIBin), BMIBin := "Unknown"]
dtTest[, BMIBin := factor(BMIBin,
levels = c("Very severely underweight",
"Severely underweight",
"Underweight",
"Normal",
"Overweight",
"Moderately obese",
"Severely obese",
"Very severely obese",
"Unknown"))]
dtTest[, smoking_status := ifelse(smoking_status == "",
"Unknown", smoking_status)]
dtTest[, GlucoseLevelBins := cut(avg_glucose_level,
breaks = seq(50, 300, 50),
include.lowest = T)]
dtSubmission[, stroke := predict(model2, dtTest, type = "response")]
write.csv(
dtSubmission,
paste0(
Sys.getenv("MyGitRepo"),
"/McKinsey/Datasets/sample_submission_1.csv"
),
row.names = F
)
dtProbCurve <- dtTrain[, predictedProbabilites]
setorder(dtProbCurve, predictedProbabilites)
dtProbCurve <- as.data.table(dtTrain[, predictedProbabilites])
setorder(dtProbCurve, "predictedProbabilites")
dtProbCurve <- as.data.table(dtTrain[, predictedProbabilites])
setorder(dtProbCurve, "predictedProbabilites")
names(dtProbCurve)
setnames(dtProbCurve, "predictedProbabilites")
setorder(dtProbCurve, "predictedProbabilites")
ggplot(dtProbCurve) +
geom_point(aes(x = row.names(dtProbCurve),
y = predictedProbabilites)) +
xlab("Index") +
ylab("Probability")
ggplot(dtProbCurve) +
geom_point(aes(x = row.names(dtProbCurve),
y = predictedProbabilites)) +
xlab("Index") +
ylab("Probability")
ggplot(dtProbCurve) +
geom_point(aes(x = as.numeric(row.names(dtProbCurve)),
y = predictedProbabilites)) +
xlab("Index") +
ylab("Probability")
names(dtTrain)
# BMI values have been missing
# BMI Index has been grouped based on WHO Statistical categories
# Missing BMI values are grouped as Unknown
model2 <- glm(stroke ~ AgeBin + hypertension + heart_disease +
smoking_status + GlucoseLevelBins + BMIBin + work_type +
ever_married + residence_type,
data = dtTrain, family = binomial(link = "probit"))
